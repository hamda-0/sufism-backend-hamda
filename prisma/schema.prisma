generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["fullTextSearchPostgres"]
}

enum AuthProvider {
  credentials
  google
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id @default(cuid())
  points Int
  expire DateTime?
}

model User {
  id         String         @id @default(cuid())
  fullName       String
  email          String        @unique
  password       String?
  avatar         String?        @default("https://via.placeholder.com/70x70")
  OTP            String?        @unique
  OTP_EXPIRES_IN DateTime?
  isVerified     Boolean        @default(false)
  tokenVersion   Int            @default(0)
  authProvider   AuthProvider @default(credentials)
  member     Member?  
  createdAt      DateTime       @default(now())

  @@map("users")
}
enum Role {
  VOLUNTEER
  DONOR
  COLLABORATOR
}
model Member {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  // fullName  String
  // email     String   @unique
  phone     String?
  country   String
  roles     MemberRole[]
  volunteerDetails   VolunteerDetails?
  donorPreferences   DonorPreferences?
  collaboratorIntent CollaboratorIntent?

  agreedToPrinciples Boolean @default(false)
  consentedToUpdates Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("members")
}
model MemberRole {
  id       String  @id @default(cuid())
  role     Role
  member   Member  @relation(fields: [memberId], references: [id])
  memberId String
}

model VolunteerDetails {
  id             String   @id @default(cuid())
  member         Member   @relation(fields: [memberId], references: [id])
  memberId       String   @unique
  supportAreas   String?
  experience     String?
  timeMonthly    String?
  mode           VolunteeringMode
}

enum SupportArea {
  SPIRITUAL_PROGRAMS
  COMMUNITY_OUTREACH
  CULTURAL_PRESERVATION
  DIGITAL_MEDIA
  CRAFTSMANSHIP
}



enum VolunteeringMode {
  IN_PERSON
  REMOTE
  HYBRID
}

model DonorPreferences {
  id              String   @id @default(cuid())
  member          Member   @relation(fields: [memberId], references: [id])
  memberId        String   @unique
  typesOfSupport  String
}

model CollaboratorIntent {
  id             String   @id @default(cuid())
  member         Member   @relation(fields: [memberId], references: [id])
  memberId       String   @unique
  collaborationTypes String?
  organization       String?
  intent             String?
  additionalInfo     String?
}

