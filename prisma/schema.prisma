generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum AuthProvider {
  credentials
  google
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id @default(cuid())
  points Int
  expire DateTime?
}

model User {
  id         String         @id @default(cuid())
  fullName       String
  email          String        @unique
  password       String?
  avatar         String?        @default("https://via.placeholder.com/70x70")
  OTP            String?        @unique
  OTP_EXPIRES_IN DateTime?
  isVerified     Boolean        @default(false)
  tokenVersion   Int            @default(0)
  authProvider   AuthProvider @default(credentials)
  member     Member?  
  donation Donation?
  createdAt      DateTime       @default(now())

  @@map("users")
   Review Review[]
  Product Product[]
}


model Member {
  id        String   @id @default(cuid())//Todo better to use id
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  // fullName  String //Todo
  // email     String //Todo
  phone     String?
  country   String

  role    String[]//todo: add role 
  
  volunteerSupport String[] @default([""])
  previousVolunteerExp String?
  monthlyTime String?
  volunteerMode VolunteeringMode @default(IN_PERSON)

  donorType   String[] @default([""])

  collaboratorIntent String[] @default([""])
  organization String?
  intentCreation String?

  additionalInfo String?
  agreedToPrinciples Boolean @default(false)
  consentedToUpdates Boolean @default(false)
  createdAt DateTime @default(now())
  @@map("members")
}
model Donation {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  amount String
  pool   TPOOL[] @default([SUFI_SCIENCE_CENTER])
  donorType   DONATIONTYPE @default(ONE_TIME)
  createdAt DateTime @default(now())
  @@map("donations")
}


enum VolunteeringMode {
  IN_PERSON
  REMOTE
  HYBRID
}
enum DONATIONTYPE {
  ONE_TIME
  MONTHLY
  GENERAL_DONATIONS
  SPONSORSHIP_DONATIONS
  PATRON_MEMBERSHIP_CONTRIBUTIONS
  EDUCATIONAL_SCHOLARSHIP_DONATIONS
  LEGACY_PLANNED_GIVING
  RECURRING
}
// enum CATEGORY{
//   JWELERY_&_ACCESSPORIES
//   ART_WALL_CONTROL\
//   HOME&WALLDECOR
//   FASION&UPRAISEL
  

// }
enum TPOOL {
  SUFI_SCIENCE_CENTER
  SPONSOR_SCHOLAR
  PRESERVE_ART_AND_CRAFT
  SPONSOR_EVENTS

}
model Product {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  
  title       String   @default("")
  description String   @default("")
  price       Float
  stock       Int      @default(0)
  category    DONATIONTYPE @default(ONE_TIME)
  image      String
  sku         String   @unique
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews     Review[]
  @@map("products")
}
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  productId Int
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@map("reviews")
}
