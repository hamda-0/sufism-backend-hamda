generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum AuthProvider {
  credentials
  google
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id @default(cuid())
  points Int
  expire DateTime?
}

model User {
  id         String         @id @default(cuid())
  fullName       String
  email          String        @unique
  password       String?
  avatar         String?        @default("https://via.placeholder.com/70x70")
  OTP            String?        @unique
  OTP_EXPIRES_IN DateTime?
  isVerified     Boolean        @default(false)
  tokenVersion   Int            @default(0)
  authProvider   AuthProvider @default(credentials)
  member     Member?  
  donation Donation?
  Review Review[]
  carts Cart[]
  wishlists Wishlist[]
  createdAt      DateTime       @default(now())
  @@map("users")
}


model Member {
  id        String   @id @default(cuid())//Todo better to use id
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  phone     String?
  country   String
  role    String[]//todo: add role 
  
  volunteerSupport String[] @default([""])
  previousVolunteerExp String?
  monthlyTime String?
  volunteerMode VolunteeringMode @default(IN_PERSON)

  donorType   String[] @default([""])

  collaboratorIntent String[] @default([""])
  organization String?
  intentCreation String?

  additionalInfo String?
  agreedToPrinciples Boolean @default(false)
  consentedToUpdates Boolean @default(false)
  createdAt DateTime @default(now())
  @@map("members")
}
model Donation {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  amount String
  pool   TPOOL[] @default([SUFI_SCIENCE_CENTER])
  donorType   DONATION_TYPE @default(ONE_TIME)
  createdAt DateTime @default(now())
  @@map("donations")
}


enum VolunteeringMode {
  IN_PERSON
  REMOTE
  HYBRID
}
enum DONATION_TYPE {
  ONE_TIME
  MONTHLY
  GENERAL_DONATIONS
  SPONSORSHIP_DONATIONS
  PATRON_MEMBERSHIP_CONTRIBUTIONS
  EDUCATIONAL_SCHOLARSHIP_DONATIONS
  LEGACY_PLANNED_GIVING
  RECURRING
}
enum CATEGORY_TYPE {
  JWELERY_ACCESSPORIES
  ART_WALL_CONTROL
  HOME_WALLDECOR
  FASION_UPRAISEL
  WELLNESS_MEDITAION
  DIGITAL_BOOKS
  AUDIO_SPECTRUM
}
enum TPOOL {
  SUFI_SCIENCE_CENTER
  SPONSOR_SCHOLAR
  PRESERVE_ART_AND_CRAFT
  SPONSOR_EVENTS

}
model Product {
  id             Int           @id @default(autoincrement())
  title          String        @default("")
  description    String        @default("")
  note  String @default("")
  price          Float
  discount       Float?        @default(0)
  deliveryTime   String?       // e.g., "5â€“7 business days"
  // shippingCost   Float?        // per product
  returnPolicy   String?       // e.g., "30-day return for unused items"
  stock          Int           @default(0)
  category       CATEGORY_TYPE @default(JWELERY_ACCESSPORIES)
  images          String[]
  tags           String[]
  sku            String        @unique 
  reviews        Review[]
  carts Cart[]
  wishlists Wishlist[]
  isAvailable    Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("products")
}


model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  review   String
  productId Int
  userId    String
  status STATUS_TYPE @default(PENDING)
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@map("reviews")
}
enum STATUS_TYPE {
  PENDING
  ACCEPTED
  REJECTED
}
model Cart {
  id         Int      @id @default(autoincrement())
  userId     String
  productId  Int
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  qty   Int      @default(1)
  createdAt  DateTime @default(now())

  @@map("carts")
}
model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
  @@map("wishlists")
}

