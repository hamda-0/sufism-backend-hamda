generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum AuthProvider {
  credentials
  google
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id @default(cuid())
  points Int
  expire DateTime?
}

model User {
  id         String         @id @default(cuid())
  fullName       String
  email          String        @unique
  password       String?
  avatar         String?        @default("https://via.placeholder.com/70x70")
  OTP            String?        @unique
  OTP_EXPIRES_IN DateTime?
  isVerified     Boolean        @default(false)
  tokenVersion   Int            @default(0)
  authProvider   AuthProvider @default(credentials)
  member     Member?  
  createdAt      DateTime       @default(now())

  @@map("users")
}


model Member {
  id        String   @id @default(cuid())//Todo better to use id
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  // fullName  String //Todo
  // email     String //Todo
  phone     String?
  country   String

  role    String[]//todo: add role 
  
  volunteerSupport String[] @default([""])
  previousVolunteerExp String?
  monthlyTime String?
  volunteerMode   VolunteeringMode @default(IN_PERSON)

  donorType   String[] @default([""])

  collaboratorIntent String[] @default([""])
  organization String?
  intentCreation String?

  additionalInfo String?
  agreedToPrinciples Boolean @default(false)
  consentedToUpdates Boolean @default(false)
  createdAt DateTime @default(now())
  @@map("members")
}



enum VolunteeringMode {
  IN_PERSON
  REMOTE
  HYBRID
}
